// This file is generated by rust-protobuf 2.23.0. Do not edit
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_imports)]
#![allow(unused_results)]
//! Generated file from `schema.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
// const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_2_23_0;

#[derive(PartialEq,Clone,Default)]
#[cfg_attr(feature = "with-serde", derive(::serde::Serialize, ::serde::Deserialize))]
pub struct RegisterRequest {
    // message fields
    pub clientVersion: u32,
    pub clientLanguage: ::std::string::String,
    // special fields
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub unknown_fields: ::protobuf::UnknownFields,
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a RegisterRequest {
    fn default() -> &'a RegisterRequest {
        <RegisterRequest as ::protobuf::Message>::default_instance()
    }
}

impl RegisterRequest {
    pub fn new() -> RegisterRequest {
        ::std::default::Default::default()
    }

    // uint32 clientVersion = 1;


    pub fn get_clientVersion(&self) -> u32 {
        self.clientVersion
    }
    pub fn clear_clientVersion(&mut self) {
        self.clientVersion = 0;
    }

    // Param is passed by value, moved
    pub fn set_clientVersion(&mut self, v: u32) {
        self.clientVersion = v;
    }

    // string clientLanguage = 2;


    pub fn get_clientLanguage(&self) -> &str {
        &self.clientLanguage
    }
    pub fn clear_clientLanguage(&mut self) {
        self.clientLanguage.clear();
    }

    // Param is passed by value, moved
    pub fn set_clientLanguage(&mut self, v: ::std::string::String) {
        self.clientLanguage = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_clientLanguage(&mut self) -> &mut ::std::string::String {
        &mut self.clientLanguage
    }

    // Take field
    pub fn take_clientLanguage(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.clientLanguage, ::std::string::String::new())
    }
}

impl ::protobuf::Message for RegisterRequest {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.clientVersion = tmp;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.clientLanguage)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.clientVersion != 0 {
            my_size += ::protobuf::rt::value_size(1, self.clientVersion, ::protobuf::wire_format::WireTypeVarint);
        }
        if !self.clientLanguage.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.clientLanguage);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.clientVersion != 0 {
            os.write_uint32(1, self.clientVersion)?;
        }
        if !self.clientLanguage.is_empty() {
            os.write_string(2, &self.clientLanguage)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> RegisterRequest {
        RegisterRequest::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                "clientVersion",
                |m: &RegisterRequest| { &m.clientVersion },
                |m: &mut RegisterRequest| { &mut m.clientVersion },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "clientLanguage",
                |m: &RegisterRequest| { &m.clientLanguage },
                |m: &mut RegisterRequest| { &mut m.clientLanguage },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<RegisterRequest>(
                "RegisterRequest",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static RegisterRequest {
        static instance: ::protobuf::rt::LazyV2<RegisterRequest> = ::protobuf::rt::LazyV2::INIT;
        instance.get(RegisterRequest::new)
    }
}

impl ::protobuf::Clear for RegisterRequest {
    fn clear(&mut self) {
        self.clientVersion = 0;
        self.clientLanguage.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for RegisterRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for RegisterRequest {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
#[cfg_attr(feature = "with-serde", derive(::serde::Serialize, ::serde::Deserialize))]
pub struct LoginRequest {
    // message fields
    pub user: ::protobuf::SingularPtrField<UserCredentials>,
    pub clientVersion: u32,
    pub clientLanguage: ::std::string::String,
    // special fields
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub unknown_fields: ::protobuf::UnknownFields,
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a LoginRequest {
    fn default() -> &'a LoginRequest {
        <LoginRequest as ::protobuf::Message>::default_instance()
    }
}

impl LoginRequest {
    pub fn new() -> LoginRequest {
        ::std::default::Default::default()
    }

    // .UserCredentials user = 1;


    pub fn get_user(&self) -> &UserCredentials {
        self.user.as_ref().unwrap_or_else(|| <UserCredentials as ::protobuf::Message>::default_instance())
    }
    pub fn clear_user(&mut self) {
        self.user.clear();
    }

    pub fn has_user(&self) -> bool {
        self.user.is_some()
    }

    // Param is passed by value, moved
    pub fn set_user(&mut self, v: UserCredentials) {
        self.user = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_user(&mut self) -> &mut UserCredentials {
        if self.user.is_none() {
            self.user.set_default();
        }
        self.user.as_mut().unwrap()
    }

    // Take field
    pub fn take_user(&mut self) -> UserCredentials {
        self.user.take().unwrap_or_else(|| UserCredentials::new())
    }

    // uint32 clientVersion = 2;


    pub fn get_clientVersion(&self) -> u32 {
        self.clientVersion
    }
    pub fn clear_clientVersion(&mut self) {
        self.clientVersion = 0;
    }

    // Param is passed by value, moved
    pub fn set_clientVersion(&mut self, v: u32) {
        self.clientVersion = v;
    }

    // string clientLanguage = 3;


    pub fn get_clientLanguage(&self) -> &str {
        &self.clientLanguage
    }
    pub fn clear_clientLanguage(&mut self) {
        self.clientLanguage.clear();
    }

    // Param is passed by value, moved
    pub fn set_clientLanguage(&mut self, v: ::std::string::String) {
        self.clientLanguage = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_clientLanguage(&mut self) -> &mut ::std::string::String {
        &mut self.clientLanguage
    }

    // Take field
    pub fn take_clientLanguage(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.clientLanguage, ::std::string::String::new())
    }
}

impl ::protobuf::Message for LoginRequest {
    fn is_initialized(&self) -> bool {
        for v in &self.user {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.user)?;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.clientVersion = tmp;
                },
                3 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.clientLanguage)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.user.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if self.clientVersion != 0 {
            my_size += ::protobuf::rt::value_size(2, self.clientVersion, ::protobuf::wire_format::WireTypeVarint);
        }
        if !self.clientLanguage.is_empty() {
            my_size += ::protobuf::rt::string_size(3, &self.clientLanguage);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.user.as_ref() {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if self.clientVersion != 0 {
            os.write_uint32(2, self.clientVersion)?;
        }
        if !self.clientLanguage.is_empty() {
            os.write_string(3, &self.clientLanguage)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> LoginRequest {
        LoginRequest::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<UserCredentials>>(
                "user",
                |m: &LoginRequest| { &m.user },
                |m: &mut LoginRequest| { &mut m.user },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                "clientVersion",
                |m: &LoginRequest| { &m.clientVersion },
                |m: &mut LoginRequest| { &mut m.clientVersion },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "clientLanguage",
                |m: &LoginRequest| { &m.clientLanguage },
                |m: &mut LoginRequest| { &mut m.clientLanguage },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<LoginRequest>(
                "LoginRequest",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static LoginRequest {
        static instance: ::protobuf::rt::LazyV2<LoginRequest> = ::protobuf::rt::LazyV2::INIT;
        instance.get(LoginRequest::new)
    }
}

impl ::protobuf::Clear for LoginRequest {
    fn clear(&mut self) {
        self.user.clear();
        self.clientVersion = 0;
        self.clientLanguage.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for LoginRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for LoginRequest {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
#[cfg_attr(feature = "with-serde", derive(::serde::Serialize, ::serde::Deserialize))]
pub struct LoginResponse {
    // message fields
    pub isOutdated: bool,
    // special fields
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub unknown_fields: ::protobuf::UnknownFields,
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a LoginResponse {
    fn default() -> &'a LoginResponse {
        <LoginResponse as ::protobuf::Message>::default_instance()
    }
}

impl LoginResponse {
    pub fn new() -> LoginResponse {
        ::std::default::Default::default()
    }

    // bool isOutdated = 1;


    pub fn get_isOutdated(&self) -> bool {
        self.isOutdated
    }
    pub fn clear_isOutdated(&mut self) {
        self.isOutdated = false;
    }

    // Param is passed by value, moved
    pub fn set_isOutdated(&mut self, v: bool) {
        self.isOutdated = v;
    }
}

impl ::protobuf::Message for LoginResponse {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_bool()?;
                    self.isOutdated = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.isOutdated != false {
            my_size += 2;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.isOutdated != false {
            os.write_bool(1, self.isOutdated)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> LoginResponse {
        LoginResponse::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBool>(
                "isOutdated",
                |m: &LoginResponse| { &m.isOutdated },
                |m: &mut LoginResponse| { &mut m.isOutdated },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<LoginResponse>(
                "LoginResponse",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static LoginResponse {
        static instance: ::protobuf::rt::LazyV2<LoginResponse> = ::protobuf::rt::LazyV2::INIT;
        instance.get(LoginResponse::new)
    }
}

impl ::protobuf::Clear for LoginResponse {
    fn clear(&mut self) {
        self.isOutdated = false;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for LoginResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for LoginResponse {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
#[cfg_attr(feature = "with-serde", derive(::serde::Serialize, ::serde::Deserialize))]
pub struct UserCredentials {
    // message fields
    pub id: ::std::string::String,
    pub secret: ::std::string::String,
    // special fields
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub unknown_fields: ::protobuf::UnknownFields,
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a UserCredentials {
    fn default() -> &'a UserCredentials {
        <UserCredentials as ::protobuf::Message>::default_instance()
    }
}

impl UserCredentials {
    pub fn new() -> UserCredentials {
        ::std::default::Default::default()
    }

    // string id = 1;


    pub fn get_id(&self) -> &str {
        &self.id
    }
    pub fn clear_id(&mut self) {
        self.id.clear();
    }

    // Param is passed by value, moved
    pub fn set_id(&mut self, v: ::std::string::String) {
        self.id = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_id(&mut self) -> &mut ::std::string::String {
        &mut self.id
    }

    // Take field
    pub fn take_id(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.id, ::std::string::String::new())
    }

    // string secret = 2;


    pub fn get_secret(&self) -> &str {
        &self.secret
    }
    pub fn clear_secret(&mut self) {
        self.secret.clear();
    }

    // Param is passed by value, moved
    pub fn set_secret(&mut self, v: ::std::string::String) {
        self.secret = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_secret(&mut self) -> &mut ::std::string::String {
        &mut self.secret
    }

    // Take field
    pub fn take_secret(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.secret, ::std::string::String::new())
    }
}

impl ::protobuf::Message for UserCredentials {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.id)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.secret)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.id.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.id);
        }
        if !self.secret.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.secret);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.id.is_empty() {
            os.write_string(1, &self.id)?;
        }
        if !self.secret.is_empty() {
            os.write_string(2, &self.secret)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> UserCredentials {
        UserCredentials::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "id",
                |m: &UserCredentials| { &m.id },
                |m: &mut UserCredentials| { &mut m.id },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "secret",
                |m: &UserCredentials| { &m.secret },
                |m: &mut UserCredentials| { &mut m.secret },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<UserCredentials>(
                "UserCredentials",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static UserCredentials {
        static instance: ::protobuf::rt::LazyV2<UserCredentials> = ::protobuf::rt::LazyV2::INIT;
        instance.get(UserCredentials::new)
    }
}

impl ::protobuf::Clear for UserCredentials {
    fn clear(&mut self) {
        self.id.clear();
        self.secret.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for UserCredentials {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for UserCredentials {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
#[cfg_attr(feature = "with-serde", derive(::serde::Serialize, ::serde::Deserialize))]
pub struct RegisterResponse {
    // message fields
    pub user: ::protobuf::SingularPtrField<UserCredentials>,
    pub isOutdated: bool,
    // special fields
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub unknown_fields: ::protobuf::UnknownFields,
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a RegisterResponse {
    fn default() -> &'a RegisterResponse {
        <RegisterResponse as ::protobuf::Message>::default_instance()
    }
}

impl RegisterResponse {
    pub fn new() -> RegisterResponse {
        ::std::default::Default::default()
    }

    // .UserCredentials user = 1;


    pub fn get_user(&self) -> &UserCredentials {
        self.user.as_ref().unwrap_or_else(|| <UserCredentials as ::protobuf::Message>::default_instance())
    }
    pub fn clear_user(&mut self) {
        self.user.clear();
    }

    pub fn has_user(&self) -> bool {
        self.user.is_some()
    }

    // Param is passed by value, moved
    pub fn set_user(&mut self, v: UserCredentials) {
        self.user = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_user(&mut self) -> &mut UserCredentials {
        if self.user.is_none() {
            self.user.set_default();
        }
        self.user.as_mut().unwrap()
    }

    // Take field
    pub fn take_user(&mut self) -> UserCredentials {
        self.user.take().unwrap_or_else(|| UserCredentials::new())
    }

    // bool isOutdated = 2;


    pub fn get_isOutdated(&self) -> bool {
        self.isOutdated
    }
    pub fn clear_isOutdated(&mut self) {
        self.isOutdated = false;
    }

    // Param is passed by value, moved
    pub fn set_isOutdated(&mut self, v: bool) {
        self.isOutdated = v;
    }
}

impl ::protobuf::Message for RegisterResponse {
    fn is_initialized(&self) -> bool {
        for v in &self.user {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.user)?;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_bool()?;
                    self.isOutdated = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.user.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if self.isOutdated != false {
            my_size += 2;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.user.as_ref() {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if self.isOutdated != false {
            os.write_bool(2, self.isOutdated)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> RegisterResponse {
        RegisterResponse::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<UserCredentials>>(
                "user",
                |m: &RegisterResponse| { &m.user },
                |m: &mut RegisterResponse| { &mut m.user },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBool>(
                "isOutdated",
                |m: &RegisterResponse| { &m.isOutdated },
                |m: &mut RegisterResponse| { &mut m.isOutdated },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<RegisterResponse>(
                "RegisterResponse",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static RegisterResponse {
        static instance: ::protobuf::rt::LazyV2<RegisterResponse> = ::protobuf::rt::LazyV2::INIT;
        instance.get(RegisterResponse::new)
    }
}

impl ::protobuf::Clear for RegisterResponse {
    fn clear(&mut self) {
        self.user.clear();
        self.isOutdated = false;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for RegisterResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for RegisterResponse {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
#[cfg_attr(feature = "with-serde", derive(::serde::Serialize, ::serde::Deserialize))]
pub struct RejectionResponse {
    // message fields
    pub sessionFilterRejection: RejectionResponse_SessionFilterRejection,
    // special fields
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub unknown_fields: ::protobuf::UnknownFields,
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a RejectionResponse {
    fn default() -> &'a RejectionResponse {
        <RejectionResponse as ::protobuf::Message>::default_instance()
    }
}

impl RejectionResponse {
    pub fn new() -> RejectionResponse {
        ::std::default::Default::default()
    }

    // .RejectionResponse.SessionFilterRejection sessionFilterRejection = 1;


    pub fn get_sessionFilterRejection(&self) -> RejectionResponse_SessionFilterRejection {
        self.sessionFilterRejection
    }
    pub fn clear_sessionFilterRejection(&mut self) {
        self.sessionFilterRejection = RejectionResponse_SessionFilterRejection::NONE;
    }

    // Param is passed by value, moved
    pub fn set_sessionFilterRejection(&mut self, v: RejectionResponse_SessionFilterRejection) {
        self.sessionFilterRejection = v;
    }
}

impl ::protobuf::Message for RejectionResponse {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_proto3_enum_with_unknown_fields_into(wire_type, is, &mut self.sessionFilterRejection, 1, &mut self.unknown_fields)?
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.sessionFilterRejection != RejectionResponse_SessionFilterRejection::NONE {
            my_size += ::protobuf::rt::enum_size(1, self.sessionFilterRejection);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.sessionFilterRejection != RejectionResponse_SessionFilterRejection::NONE {
            os.write_enum(1, ::protobuf::ProtobufEnum::value(&self.sessionFilterRejection))?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> RejectionResponse {
        RejectionResponse::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeEnum<RejectionResponse_SessionFilterRejection>>(
                "sessionFilterRejection",
                |m: &RejectionResponse| { &m.sessionFilterRejection },
                |m: &mut RejectionResponse| { &mut m.sessionFilterRejection },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<RejectionResponse>(
                "RejectionResponse",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static RejectionResponse {
        static instance: ::protobuf::rt::LazyV2<RejectionResponse> = ::protobuf::rt::LazyV2::INIT;
        instance.get(RejectionResponse::new)
    }
}

impl ::protobuf::Clear for RejectionResponse {
    fn clear(&mut self) {
        self.sessionFilterRejection = RejectionResponse_SessionFilterRejection::NONE;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for RejectionResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for RejectionResponse {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(Clone,PartialEq,Eq,Debug,Hash)]
#[cfg_attr(feature = "with-serde", derive(::serde::Serialize, ::serde::Deserialize))]
pub enum RejectionResponse_SessionFilterRejection {
    NONE = 0,
    INVALID = 1,
    SESSION_NOT_FOUND = 2,
}

impl ::protobuf::ProtobufEnum for RejectionResponse_SessionFilterRejection {
    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<RejectionResponse_SessionFilterRejection> {
        match value {
            0 => ::std::option::Option::Some(RejectionResponse_SessionFilterRejection::NONE),
            1 => ::std::option::Option::Some(RejectionResponse_SessionFilterRejection::INVALID),
            2 => ::std::option::Option::Some(RejectionResponse_SessionFilterRejection::SESSION_NOT_FOUND),
            _ => ::std::option::Option::None
        }
    }

    fn values() -> &'static [Self] {
        static values: &'static [RejectionResponse_SessionFilterRejection] = &[
            RejectionResponse_SessionFilterRejection::NONE,
            RejectionResponse_SessionFilterRejection::INVALID,
            RejectionResponse_SessionFilterRejection::SESSION_NOT_FOUND,
        ];
        values
    }

    fn enum_descriptor_static() -> &'static ::protobuf::reflect::EnumDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            ::protobuf::reflect::EnumDescriptor::new_pb_name::<RejectionResponse_SessionFilterRejection>("RejectionResponse.SessionFilterRejection", file_descriptor_proto())
        })
    }
}

impl ::std::marker::Copy for RejectionResponse_SessionFilterRejection {
}

impl ::std::default::Default for RejectionResponse_SessionFilterRejection {
    fn default() -> Self {
        RejectionResponse_SessionFilterRejection::NONE
    }
}

impl ::protobuf::reflect::ProtobufValue for RejectionResponse_SessionFilterRejection {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Enum(::protobuf::ProtobufEnum::descriptor(self))
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x0cschema.proto\x1a\x0frustproto.proto\"e\n\x0fRegisterRequest\x12&\n\
    \rclientVersion\x18\x01\x20\x01(\rR\rclientVersionB\0\x12(\n\x0eclientLa\
    nguage\x18\x02\x20\x01(\tR\x0eclientLanguageB\0:\0\"\x8a\x01\n\x0cLoginR\
    equest\x12&\n\x04user\x18\x01\x20\x01(\x0b2\x10.UserCredentialsR\x04user\
    B\0\x12&\n\rclientVersion\x18\x02\x20\x01(\rR\rclientVersionB\0\x12(\n\
    \x0eclientLanguage\x18\x03\x20\x01(\tR\x0eclientLanguageB\0:\0\"3\n\rLog\
    inResponse\x12\x20\n\nisOutdated\x18\x01\x20\x01(\x08R\nisOutdatedB\0:\0\
    \"?\n\x0fUserCredentials\x12\x10\n\x02id\x18\x01\x20\x01(\tR\x02idB\0\
    \x12\x18\n\x06secret\x18\x02\x20\x01(\tR\x06secretB\0:\0\"^\n\x10Registe\
    rResponse\x12&\n\x04user\x18\x01\x20\x01(\x0b2\x10.UserCredentialsR\x04u\
    serB\0\x12\x20\n\nisOutdated\x18\x02\x20\x01(\x08R\nisOutdatedB\0:\0\"\
    \xc4\x01\n\x11RejectionResponse\x12c\n\x16sessionFilterRejection\x18\x01\
    \x20\x01(\x0e2).RejectionResponse.SessionFilterRejectionR\x16sessionFilt\
    erRejectionB\0\"H\n\x16SessionFilterRejection\x12\x08\n\x04NONE\x10\0\
    \x12\x0b\n\x07INVALID\x10\x01\x12\x15\n\x11SESSION_NOT_FOUND\x10\x02\x1a\
    \0:\0B\x04\xb0\xa8\x08\x01b\x06proto3\
";

static file_descriptor_proto_lazy: ::protobuf::rt::LazyV2<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::LazyV2::INIT;

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    file_descriptor_proto_lazy.get(|| {
        parse_descriptor_proto()
    })
}
